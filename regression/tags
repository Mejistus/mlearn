!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mejistus/Documents/Paddle/regression/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
Hat	03-regression-polynomial.py	/^def Hat(p:np.array,x:np.array): $/;"	f
Hat	04-regression-regex.py	/^def Hat(p:np.array,x:np.array): $/;"	f
J	.ipynb_checkpoints/main-checkpoint.py	/^J=lambda y_hat,y,m:1\/2*m*sum((y_hat-y)**2)$/;"	f
J	01-regression-origin.py	/^def J(w, x, b, y, m): return 1\/(2*m)*sum((hat(w, x, b)-y)**2)$/;"	f
J	03-regression-polynomial.py	/^def J(p:np.array,x:np.array, y:np.array): $/;"	f
J	04-regression-regex.py	/^def J(p:np.array,x:np.array, y:np.array):$/;"	f
J	04-regression-regex.py	/^def J(y_hat:np.array, y:np.array): $/;"	f
X	.ipynb_checkpoints/main-checkpoint.py	/^X = 2 * np.random.rand(n_samples, 1)  # 生成0到2之间的随机数  $/;"	v
X	01-regression-origin.py	/^X = 2 * np.random.rand(1, n_samples)  # 生成0到2之间的随机数$/;"	v
X	01-regression-origin.py	/^X, Y = X.squeeze(), Y.squeeze()$/;"	v
X	02-regression-learnrate.py	/^X = X.reshape(-1, 1)  # 确保X是二维数组$/;"	v
X	02-regression-learnrate.py	/^X = np.linspace(0, 2, n_samples) + np.random.randn(n_samples) * 0.001$/;"	v
X	03-regression-polynomial.py	/^X = 2 * np.random.rand(n_samples,1)  # 生成0到2之间的随机数$/;"	v
X	04-regression-regex.py	/^X = rng * np.random.rand(n_samples,1)  # 生成0到rng之间的随机数$/;"	v
Y	.ipynb_checkpoints/main-checkpoint.py	/^Y = true_coef * X.squeeze() + true_intercept + np.random.randn(n_samples, 1) * 0.5  $/;"	v
Y	01-regression-origin.py	/^X, Y = X.squeeze(), Y.squeeze()$/;"	v
Y	01-regression-origin.py	/^Y = true_coef * X.squeeze() + true_intercept + np.random.randn(1, n_samples)*0.5$/;"	v
Y	02-regression-learnrate.py	/^Y = Y.reshape(-1, 1)  # 确保Y也是二维数组，以便后续计算$/;"	v
Y	02-regression-learnrate.py	/^Y = true_coef * X.squeeze() + true_intercept + np.random.randn(n_samples) * 0.5$/;"	v
Y	03-regression-polynomial.py	/^Y = true_coef1 * X**2 +true_coef2 * X+ true_intercept + np.random.randn( n_samples,1)$/;"	v
Y	04-regression-regex.py	/^Y = true_coef1 * X**3 +true_coef2 * X**2 +true_coef3 * X+ true_intercept + np.random.randn(n_sam/;"	v
a	.ipynb_checkpoints/main-checkpoint.py	/^a,w,b,m=0.001,1,1,1  $/;"	v
a	01-regression-origin.py	/^    a = f\/(np.log(i+np.e))$/;"	v
a	01-regression-origin.py	/^a = f$/;"	v
a	02-regression-learnrate.py	/^a = 1$/;"	v
alpha	03-regression-polynomial.py	/^    alpha=alpha_copy\/(np.log(i+np.e))$/;"	v
alpha	03-regression-polynomial.py	/^alpha=1$/;"	v
alpha	04-regression-regex.py	/^    alpha=alpha_copy\/(np.log(i+np.e))$/;"	v
alpha	04-regression-regex.py	/^alpha=0.01$/;"	v
alpha_copy	03-regression-polynomial.py	/^alpha_copy=alpha$/;"	v
alpha_copy	04-regression-regex.py	/^alpha_copy=alpha$/;"	v
axs	04-regression-regex.py	/^fig, axs = plt.subplots(1, 1, figsize=(14, 5))$/;"	v
b	.ipynb_checkpoints/main-checkpoint.py	/^a,w,b,m=0.001,1,1,1  $/;"	v
b	01-regression-origin.py	/^    w, b = w-a*dw(X, Y, w, b, m), b-a*db(X, Y, w, b, m)$/;"	v
b	01-regression-origin.py	/^f, w, b, m = 1, 0, 0, n_samples$/;"	v
b	02-regression-learnrate.py	/^b = 0$/;"	v
b	02-regression-learnrate.py	/^w, b, trace = gradient_descent(X, Y, w, b, learning_rate, iterations)$/;"	v
b	03-regression-polynomial.py	/^w1,w2,b=p[0],p[1],p[2]$/;"	v
b	04-regression-regex.py	/^w1,w2,w3,b=p[0],p[1],p[2],p[3]$/;"	v
batched	01-regression-origin.py	/^def batched(iterable, n):$/;"	f
batched	03-regression-polynomial.py	/^def batched(iterable, n):$/;"	f
batched	04-regression-regex.py	/^def batched(iterable, n):$/;"	f
batches	01-regression-origin.py	/^batches = 100$/;"	v
batches	03-regression-polynomial.py	/^batches = 1000$/;"	v
batches	04-regression-regex.py	/^batches = 1000$/;"	v
compute_gradients	02-regression-learnrate.py	/^def compute_gradients(X, Y, w, b):$/;"	f
db	.ipynb_checkpoints/main-checkpoint.py	/^db=lambda x,y,w,b,m:1\/m*sum((hat(w,x,b)-y))$/;"	f
db	01-regression-origin.py	/^def db(x, y, w, b, m): return 1\/m*sum((hat(w, x, b)-y))$/;"	f
delta	03-regression-polynomial.py	/^def delta(p:np.array,x:np.array,y:np.array):$/;"	f
delta	04-regression-regex.py	/^def delta(p:np.array,x:np.array,y:np.array):$/;"	f
dw	.ipynb_checkpoints/main-checkpoint.py	/^dw=lambda x,y,w,b,m:1\/m*sum((hat(w,x,b)-y)*x)$/;"	f
dw	01-regression-origin.py	/^def dw(x, y, w, b, m): return 1\/m*sum((hat(w, x, b)-y)*x)$/;"	f
f	01-regression-origin.py	/^f, w, b, m = 1, 0, 0, n_samples$/;"	v
fig	04-regression-regex.py	/^fig, axs = plt.subplots(1, 1, figsize=(14, 5))$/;"	v
final_y_line	02-regression-learnrate.py	/^final_y_line = np.squeeze(w * x_line + b)$/;"	v
flag	01-regression-origin.py	/^flag = 1$/;"	v
flag	03-regression-polynomial.py	/^flag = 1$/;"	v
gradient_descent	02-regression-learnrate.py	/^def gradient_descent(X, Y, w, b, learning_rate, iterations):$/;"	f
hat	.ipynb_checkpoints/main-checkpoint.py	/^hat=lambda w,x,b:w*x+b$/;"	f
hat	01-regression-origin.py	/^def hat(w, x, b): return w*x+b$/;"	f
iterations	02-regression-learnrate.py	/^iterations = 100000$/;"	v
learning_rate	02-regression-learnrate.py	/^learning_rate = a$/;"	v
lmd	04-regression-regex.py	/^lmd=1$/;"	v
m	.ipynb_checkpoints/main-checkpoint.py	/^a,w,b,m=0.001,1,1,1  $/;"	v
m	01-regression-origin.py	/^f, w, b, m = 1, 0, 0, n_samples$/;"	v
n_samples	.ipynb_checkpoints/main-checkpoint.py	/^n_samples = 100  $/;"	v
n_samples	01-regression-origin.py	/^n_samples = 100$/;"	v
n_samples	02-regression-learnrate.py	/^n_samples = 100$/;"	v
n_samples	03-regression-polynomial.py	/^n_samples = 100$/;"	v
n_samples	04-regression-regex.py	/^n_samples = 100$/;"	v
np	.ipynb_checkpoints/main-checkpoint.py	/^import numpy as np  $/;"	I	nameref:module:numpy
np	.ipynb_checkpoints/main-checkpoint.py	/^import numpy as np $/;"	I	nameref:module:numpy
np	01-regression-origin.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	02-regression-learnrate.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	03-regression-polynomial.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	04-regression-regex.py	/^import numpy as np$/;"	I	nameref:module:numpy
p	03-regression-polynomial.py	/^    p=p-alpha*delta(p,X,Y)$/;"	v
p	03-regression-polynomial.py	/^p=np.array([1,1,1])# w1,w2,b$/;"	v
p	03-regression-polynomial.py	/^p=p.squeeze()$/;"	v
p	04-regression-regex.py	/^    p=p-alpha*delta(p,X,Y)$/;"	v
p	04-regression-regex.py	/^p=np.array([1,1,1,1])# w1,w2,w3,b$/;"	v
p	04-regression-regex.py	/^p=p.squeeze()$/;"	v
pd	.ipynb_checkpoints/main-checkpoint.py	/^import pandas as pd $/;"	I	nameref:module:pandas
pd	01-regression-origin.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	03-regression-polynomial.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	04-regression-regex.py	/^import pandas as pd$/;"	I	nameref:module:pandas
plt	.ipynb_checkpoints/main-checkpoint.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	01-regression-origin.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	02-regression-learnrate.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	03-regression-polynomial.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	04-regression-regex.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
polynomial	04-regression-regex.py	/^polynomial=4$/;"	v
residual	.ipynb_checkpoints/main-checkpoint.py	/^    residual=J(hat(w,X,b),Y,m)$/;"	v
residual	01-regression-origin.py	/^    residual = J(w, X, b, Y, m)$/;"	v
residual	03-regression-polynomial.py	/^    residual = J(p,X,Y)$/;"	v
residual	04-regression-regex.py	/^    residual = J(Hat(p,X),Y)$/;"	v
residual	04-regression-regex.py	/^    residual = J(p,X,Y)$/;"	v
rng	04-regression-regex.py	/^rng=3$/;"	v
tm	.ipynb_checkpoints/main-checkpoint.py	/^import tqdm as tm$/;"	I	nameref:module:tqdm
tm	01-regression-origin.py	/^import tqdm as tm$/;"	I	nameref:module:tqdm
tm	02-regression-learnrate.py	/^import tqdm as tm$/;"	I	nameref:module:tqdm
tm	03-regression-polynomial.py	/^import tqdm as tm$/;"	I	nameref:module:tqdm
tm	04-regression-regex.py	/^import tqdm as tm$/;"	I	nameref:module:tqdm
trace	01-regression-origin.py	/^trace = []$/;"	v
trace	02-regression-learnrate.py	/^w, b, trace = gradient_descent(X, Y, w, b, learning_rate, iterations)$/;"	v
trace	03-regression-polynomial.py	/^trace = []$/;"	v
trace	04-regression-regex.py	/^trace = []$/;"	v
true_coef	.ipynb_checkpoints/main-checkpoint.py	/^true_coef = 2.5  $/;"	v
true_coef	01-regression-origin.py	/^true_coef = 2.5$/;"	v
true_coef	02-regression-learnrate.py	/^true_coef = 2.5$/;"	v
true_coef1	03-regression-polynomial.py	/^true_coef1 = 20$/;"	v
true_coef1	04-regression-regex.py	/^true_coef1 = 0$/;"	v
true_coef2	03-regression-polynomial.py	/^true_coef2 = 7$/;"	v
true_coef2	04-regression-regex.py	/^true_coef2 = 0$/;"	v
true_coef3	04-regression-regex.py	/^true_coef3 = 7$/;"	v
true_intercept	.ipynb_checkpoints/main-checkpoint.py	/^true_intercept = 1.3  $/;"	v
true_intercept	01-regression-origin.py	/^true_intercept = 1.0$/;"	v
true_intercept	02-regression-learnrate.py	/^true_intercept = 1.0$/;"	v
true_intercept	03-regression-polynomial.py	/^true_intercept = 10.0$/;"	v
true_intercept	04-regression-regex.py	/^true_intercept = 10.0$/;"	v
turns	01-regression-origin.py	/^turns = 10000$/;"	v
turns	03-regression-polynomial.py	/^turns = 10000$/;"	v
turns	04-regression-regex.py	/^turns = 10000$/;"	v
w	.ipynb_checkpoints/main-checkpoint.py	/^a,w,b,m=0.001,1,1,1  $/;"	v
w	01-regression-origin.py	/^    w, b = w-a*dw(X, Y, w, b, m), b-a*db(X, Y, w, b, m)$/;"	v
w	01-regression-origin.py	/^f, w, b, m = 1, 0, 0, n_samples$/;"	v
w	02-regression-learnrate.py	/^w = 0$/;"	v
w	02-regression-learnrate.py	/^w, b, trace = gradient_descent(X, Y, w, b, learning_rate, iterations)$/;"	v
w1	03-regression-polynomial.py	/^w1,w2,b=p[0],p[1],p[2]$/;"	v
w1	04-regression-regex.py	/^w1,w2,w3,b=p[0],p[1],p[2],p[3]$/;"	v
w2	03-regression-polynomial.py	/^w1,w2,b=p[0],p[1],p[2]$/;"	v
w2	04-regression-regex.py	/^w1,w2,w3,b=p[0],p[1],p[2],p[3]$/;"	v
w3	04-regression-regex.py	/^w1,w2,w3,b=p[0],p[1],p[2],p[3]$/;"	v
x_line	02-regression-learnrate.py	/^x_line = np.linspace(0, 2, 100)$/;"	v
